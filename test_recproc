(* 1+3 *)
ADD(CONST 1,CONST 3) => Int 4

(* if (not false) then 1 else 2 *)
IF(NOT FALSE,CONST 1,CONST 2) => Int 1

(* if 0 then true else false *)
IF(CONST 0,TRUE,FALSE) => Exception

(* 3*2 < 5 *)
LESS(MUL(CONST 3, CONST 2),CONST 5) => Bool false

(* true = 0 *)
EQUAL(TRUE,CONST 0) => Exception

(* tail((1::[])@(2::3::[])) *)
TAIL(APPEND(CONS(CONST 1,NIL),CONS (CONST 2, CONS(CONST 3,NIL)))) => List [Int 2; Int 3]

(* 1::3 *)
CONS(CONST 1,CONST 3) => Exception

(* let x = 10 in if x<true then 1 else 2 *)
LET("x",CONST 10, IF(LESS(VAR "x",TRUE),CONST 1,CONST 2)) => Exception

(* 1;if 5<6 then 4/2 else 3 *)
SEQ(CONST 1,IF (LESS (CONST 5,CONST 6),DIV (CONST 4, CONST 2),CONST 3)) => Int 2

(* let x = 1 in 1;x *)
SEQ(LET("x",CONST 1,CONST 1),VAR "x") => Exception

(* (proc (x) (x::[])) 1 *)
CALL(PROC ("x",CONS (VAR "x",NIL)),CONST 1) => List [Int 1]

(* let f = proc (x) (x+x) in (f 5) *)
LET("f",PROC("x",ADD(VAR "x",VAR "x")),CALL (VAR "f",CONST 5)) => Int 10

(* 
  let x = 5 in 
    let x = x+x in
      x 
*)
LET("x",CONST 5,LET("x",ADD(VAR "x",VAR "x"),VAR "x")) => Int 10

(*
  let rec factorial x = 
    if (x<1) then 1 else factorial (x-1) in
      factorial 5
*)
LETREC("factorial","x",IF(LESS(VAR "x",CONST 1),CONST 1,MUL(VAR "x",CALL (VAR "factorial",SUB(VAR "x",CONST 1)))),CALL (VAR "factorial",CONST 5)) => Int 120

(*
  let x = 2 in
    let f = proc (y) (x+y) in
      let x = 5 in
        (f 3)
*)
LET("x",CONST 2,LET ("f",PROC("y",ADD(VAR "y",VAR "x")),LET("x",CONST 5,CALL (VAR "f",CONST 3)))) => Int 5

(*
  let f = proc (x) (proc (y) (proc (z) (x+y+z))) in
    (f 1 2 3)
*)
LET("f",PROC("x",PROC("y",PROC("z",ADD(VAR "x",ADD(VAR "y",VAR "z"))))),CALL(CALL(CALL(VAR "f",CONST 1),CONST 2),CONST 3)) => Int 6

(*
  let rec drop f = proc (lst) (
    if lst=[] then [] else 
      if f (head(lst)) then drop f (tail(lst)) else lst
  ) in drop (proc (x) (5<x)) [1;3;7]
*)
LETREC("drop","f",PROC("lst",IF(ISNIL(VAR "lst"),NIL,IF(CALL(VAR "f",HEAD(VAR "lst")),CALL(CALL(VAR "drop",VAR "f"),TAIL(VAR "lst")),VAR "lst"))),CALL(CALL(VAR "drop",PROC("x",LESS(CONST 5,VAR "x"))),CONS(CONST 1,CONS(CONST 3,CONS (CONST 7,NIL))))) => List [Int 1;Int 3;Int 7]

(*
  let rec concat lst = 
    if lst=[] then [] else head(lst)@(concat tail(lst))
  in concat [[1;2];[3;4;5]]
*)
LETREC("concat","lst",IF(ISNIL(VAR "lst"),NIL,APPEND(HEAD(VAR "lst"),CALL(VAR "concat",TAIL(VAR "lst")))),CALL(VAR "concat",CONS(CONS(CONST 1,CONS(CONST 2,NIL)),CONS(CONS(CONST 3,CONS (CONST 4,CONS (CONST 5,NIL))),NIL)))) => List [Int 1;Int 2;Int 3;Int 4;Int 5]

(*
  let x = 2 in
    let rec f x = g x
    and g y = x+2 
   in f 5
*)
LET("x",CONST 2,LETMREC(("f","x",CALL (VAR "g",VAR "x")),("g","y",ADD(VAR "x",CONST 2)),CALL (VAR "f",CONST 5))) => Int 4

(*
  let rec f lst =
    if lst=[] then [] else (f (tail(lst)))@(g (lst))
  and g lst = 
    if lst=[] then [] else head(lst)::(f (tail(lst)))
  in (f [1;3;5])
*)
LETMREC(("f","lst",IF(ISNIL(VAR "lst"),NIL,APPEND(CALL(VAR "f",TAIL(VAR "lst")),CALL(VAR "g",VAR "lst")))),("g","lst",IF(ISNIL(VAR "lst"),NIL,CONS(HEAD(VAR "lst"),CALL(VAR "f",TAIL(VAR "lst"))))),CALL(VAR "f",CONS(CONST 1,CONS(CONST 3,CONS(CONST 5,NIL))))) => List [Int 5;Int 3;Int 5;Int 1;Int 5;Int 3;Int 5] 

(*
  let x = 2 in
    let rec f y = if(y=0) then 0 else x+(f (y-1)) in 
  let x = 5 in
  (f x) 
*)
LET("x",CONST 2,LETREC("f","y",IF(EQUAL(VAR "y",CONST 0),CONST 0,ADD(VAR "x",CALL (VAR "f", SUB(VAR "y",CONST 1)))),LET("x",CONST 5,CALL (VAR "f",VAR "x")))) => Int 10

(*
  let rec iter n = proc (f) (
    if n=0 then proc (x) x 
    else proc (x) (iter (n-1) (f x))
  ) in (iter 3 (proc (x) (x+2)) 3)
*)
LETREC("iter","n",PROC("f",IF(EQUAL(VAR "n",CONST 0),PROC("x",VAR "x"),PROC("x",CALL(CALL(CALL(VAR "iter",SUB(VAR "n",CONST 1)),VAR "f"),CALL (VAR "f",VAR "x"))))),CALL(CALL(CALL(VAR "iter",CONST 3),PROC ("x",ADD(VAR "x",CONST 2))),CONST 3)) => Int 9

(*
  let rec f n = if (0<n) then (f (n-1)+ n*(g n)) else 0
  and g n = if (0<n) then (1+f(n-1)) else 1
  in (f 5)
*)
LETMREC(("f","n",IF(LESS(CONST 0,VAR "n"),ADD(CALL(VAR "f",SUB(VAR "n",CONST 1)),MUL(VAR "n",CALL(VAR "g",VAR "n"))),CONST 0)),("g","n",IF(LESS(CONST 0,VAR "n"),ADD(CONST 1,CALL(VAR "f",SUB(VAR "n",CONST 1))),CONST 1)),CALL(VAR "f",CONST 5)) => Int 719

(*
  let rec g x = f 1 
  and f y = x+2 in
  (g 2)
*)
LETMREC(("g","x",CALL(VAR "f",CONST 1)),("f","y",ADD(VAR "x",CONST 2)),CALL(VAR "g",CONST 2)) => Exception

(*
  let rec sub x = if x=0 then 0 else x+(sub (x-1))
  and f x = 
    let x = x/2 in
    (sub x)
  in (f 10)
*)
LETMREC(("sub","x",IF(EQUAL(VAR "x",CONST 0),CONST 0,ADD(VAR "x",CALL(VAR "sub",SUB(VAR "x",CONST 1))))),("f","x",LET("x",DIV(VAR "x",CONST 2),CALL(VAR "sub",VAR "x"))),CALL(VAR "f", CONST 10))=> Int 15